{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create the infrastructure, web and data tier for TeamTasker's multi-AZ WordPress website. Creates a VPC with two AZs. Creates 3 subnets in each AZ. One is public facing and two are private. Create the security groups. Creates a multi-AZ RDS, EFS for storage that is split across all EC2 instances. An ELB is created and an ASG. The ASG has time-based instances as well based on peak times set out by TeamTasker. Finally, an EC2 config is created to the ASG. This instance attaches the EFS, if wordpress is installed in it then it is done. Otherwise, it installs wordpress.",
    "Resources": {
        "VPCTeamTaskerLondon": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "192.168.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "InstanceTenancy": "default",
                "Tags": [{
                    "Key": "Name",
                    "Value": "TeamTasker_London"
                }]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSNTeamTaskerAZA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.1.0/24",
                "AvailabilityZone": "ap-southeast-2a",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public_SN_TeamTasker-AZ_A"
                }]
            }
        },
        "PublicSNTeamTaskerAZB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.2.0/24",
                "AvailabilityZone": "ap-southeast-2b",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public_SN_TeamTasker-AZ_B"
                }]
            }
        },
        "PrivateSNEC2TeamTaskerAZA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.4.0/24",
                "AvailabilityZone": "ap-southeast-2a",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_SN_EC2_TeamTasker-AZ_A"
                }]
            }
        },
        "PrivateSNEC2TeamTaskerAZB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.5.0/24",
                "AvailabilityZone": "ap-southeast-2b",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_SN_EC2_TeamTasker-AZ_B"
                }]
            }
        },
        "PrivateSNRDSTeamTaskerAZA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.7.0/24",
                "AvailabilityZone": "ap-southeast-2a",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_SN_RDS_TeamTasker-AZ_A"
                }]
            }
        },
        "PrivateSNRDSTeamTaskerAZB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "CidrBlock": "192.168.8.0/24",
                "AvailabilityZone": "ap-southeast-2b",
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_SN_RDS_TeamTasker-AZ_B"
                }]
            }
        },
        "NatGatewayEIPAZA": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "Tags": [{
                    "Key": "Name",
                    "Value": "EIP_TeamTasker_AZ-A"
                }]
            }
        },
        "NatGatewayEIPAZB": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "Tags": [{
                    "Key": "Name",
                    "Value": "EIP_TeamTasker_AZ-B"
                }]
            }
        },
        "NatGatewayAZA": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": ["NatGatewayEIPAZA", "AllocationId"]
                },
                "SubnetId": {
                    "Ref": "PublicSNTeamTaskerAZA"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "NAT_TeamTasker_AZ-A"
                }]
            }
        },
        "NatGatewayAZB": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": ["NatGatewayEIPAZB", "AllocationId"]
                },
                "SubnetId": {
                    "Ref": "PublicSNTeamTaskerAZB"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "NAT_TeamTasker_AZ-B"
                }]
            }
        },
        "PublicRTTeamTasker": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public_RT_TeamTasker"
                }]
            }
        },
        "DefaultPublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRTTeamTasker"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSNTeamTaskerAZARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRTTeamTasker"
                },
                "SubnetId": {
                    "Ref": "PublicSNTeamTaskerAZA"
                }
            }
        },
        "PublicSNTeamTaskerAZBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRTTeamTasker"
                },
                "SubnetId": {
                    "Ref": "PublicSNTeamTaskerAZB"
                }
            }
        },
        "PrivateRTEC2TeamTaskerAZA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_RT_EC2_TeamTasker_AZ-A"
                }]
            }
        },
        "DefaultPrivateRouteAZA": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRTEC2TeamTaskerAZA"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayAZA"
                }
            }
        },
        "PrivateSubnetAZARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRTEC2TeamTaskerAZA"
                },
                "SubnetId": {
                    "Ref": "PrivateSNEC2TeamTaskerAZA"
                }
            }
        },
        "PrivateRTEC2TeamTaskerAZB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private_RT_EC2_TeamTasker_AZ-B"
                }]
            }
        },
        "DefaultPrivateRouteAZB": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRTEC2TeamTaskerAZB"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayAZB"
                }
            }
        },
        "PrivateSubnetAZBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRTEC2TeamTaskerAZB"
                },
                "SubnetId": {
                    "Ref": "PrivateSNEC2TeamTaskerAZB"
                }
            }
        },
        "SGEFS": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "SGEFSTeamTasker",
                "GroupDescription": "Allow inbound NFS traffic on port 2049",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "2049",
                    "ToPort": "2049",
                    "CidrIp": "0.0.0.0/0"
                }],
                "SecurityGroupEgress": [],
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "SG_EFS_TeamTasker"
                }]
            }
        },
        "SGMySQL": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "SGMYSQLTeamTasker",
                "GroupDescription": "Allow inbound MySQL traffic on port 3306",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Ref": "SGEC2"
                    }
                }],
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "SG_MySQL_TeamTasker"
                }]
            }
        },
        "SGELB": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "SGELBTeamTasker",
                "GroupDescription": "Allow inbound HTTP and HTTPS",
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [],
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "SG_ELB_TeamTasker"
                }]
            }
        },
        "SGEC2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "SGEC2TeamTasker",
                "GroupDescription": "Allow inbound HTTP, HTTPS and SSH traffic. Allow outbound HTTP, HTTPS, SSH and MYSQL",
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "SGELB"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "SGELB"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPCTeamTaskerLondon"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "SG_EC2_TeamTasker"
                }]
            }
        },
        "RDSSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Data subnets for team tasker",
                "SubnetIds": [{
                        "Ref": "PrivateSNRDSTeamTaskerAZA"
                    },
                    {
                        "Ref": "PrivateSNRDSTeamTaskerAZB"
                    }
                ],
                "Tags": [{
                    "Key": "Name",
                    "Value": "Team_Tasker_RDS_Data_Subnet"
                }]
            }
        },
        "TeamTaskerRDS": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllowMajorVersionUpgrade": false,
                "AutoMinorVersionUpgrade": true,
                "DBInstanceIdentifier": "wordpress",
                "DBName": "wordpress",
                "Engine": "MySQL",
                "EngineVersion": "8.0.16",
                "AllocatedStorage": "20",
                "MultiAZ": "true",
                "MasterUsername": "admin",
                "MasterUserPassword": "password",
                "DBInstanceClass": "db.t2.micro",
                "VPCSecurityGroups": [{
                    "Fn::GetAtt": ["SGMySQL", "GroupId"]
                }],
                "DBSubnetGroupName": {
                    "Ref": "RDSSubnetGroup"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "TeamTasker_WordPress_RDS"
                }]
            }
        },
        "EFS": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "Encrypted": false,
                "PerformanceMode": "generalPurpose",
                "ThroughputMode": "bursting",
                "LifecyclePolicies": [{
                    "TransitionToIA": "AFTER_14_DAYS"
                }]
            }
        },
        "EFSTargetMountAZA": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "EFS"
                },
                "SecurityGroups": [{
                    "Ref": "SGEFS"
                }],
                "SubnetId": {
                    "Ref": "PrivateSNEC2TeamTaskerAZA"
                }
            }
        },
        "EFSTargetMountAZB": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "EFS"
                },
                "SecurityGroups": [{
                    "Ref": "SGEFS"
                }],
                "SubnetId": {
                    "Ref": "PrivateSNEC2TeamTaskerAZB"
                }
            }
        },
        "TeamTaskerELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "HealthCheck": {
                    "Target": "HTTP:80/health_check.html",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "10",
                    "Interval": "30",
                    "Timeout": "5"
                },
                "CrossZone": true,
                "Listeners": [{
                    "LoadBalancerPort": "80",
                    "InstancePort": "80",
                    "Protocol": "HTTP"
                }],
                "SecurityGroups": [{
                    "Ref": "SGELB"
                }],
                "Subnets": [{
                    "Ref": "PublicSNTeamTaskerAZA"
                }, {
                    "Ref": "PublicSNTeamTaskerAZB"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "TeamTaskerELB"
                }]
            }
        },
        "TeamTaskerASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "ASCTeamTasker",
                "MinSize": "2",
                "MaxSize": "4",
                "HealthCheckGracePeriod": 200,
                "HealthCheckType": "ELB",
                "LoadBalancerNames": [{
                    "Ref": "TeamTaskerELB"
                }],
                "LaunchConfigurationName": {
                    "Ref": "EC2WordPressConfig"
                },
                "VPCZoneIdentifier": [{
                    "Ref": "PrivateSNEC2TeamTaskerAZA"
                }, {
                    "Ref": "PrivateSNEC2TeamTaskerAZB"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "TeamTaskerASG",
                    "PropagateAtLaunch": "true"
                }]
            }
        },
        "ASGUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "ASGDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "HighCPUUsageAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "40",
                "ComparisonOperator": "GreaterThanThreshold",
                "AlarmActions": [{
                    "Ref": "ASGUpPolicy"
                }],
                "Dimensions": [{
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "TeamTaskerASG"
                    }
                }]
            }
        },
        "LowCPUUsageAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "25",
                "ComparisonOperator": "LessThanThreshold",
                "AlarmActions": [{
                    "Ref": "ASGDownPolicy"
                }],
                "Dimensions": [{
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "TeamTaskerASG"
                    }
                }]
            }
        },
        "ScheduledASGLondonMorningIn": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "3",
                "MaxSize": "5",
                "MinSize": "3",
                "Recurrence": "0 6 * * *"
            }
        },
        "ScheduledASGLondonMorningOut": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "2",
                "MaxSize": "4",
                "MinSize": "2",
                "Recurrence": "0 8 * * *"
            }
        },
        "ScheduledASGLondonAfternoonIn": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "3",
                "MaxSize": "5",
                "MinSize": "3",
                "Recurrence": "0 15 * * *"
            }
        },
        "ScheduledASGLondonAfternoonOut": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "2",
                "MaxSize": "4",
                "MinSize": "2",
                "Recurrence": "0 17 * * *"
            }
        },
        "ScheduledASGAsiaMorningIn": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "3",
                "MaxSize": "5",
                "MinSize": "3",
                "Recurrence": "0 22 * * *"
            }
        },
        "ScheduledASGAsiaMorningOut": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "2",
                "MaxSize": "4",
                "MinSize": "2",
                "Recurrence": "0 0 * * *"
            }
        },
        "ScheduledASGAsiaAfternoonIn": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "3",
                "MaxSize": "5",
                "MinSize": "3",
                "Recurrence": "0 7 * * *"
            }
        },
        "ScheduledASGAsiaAfternoonOut": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "TeamTaskerASG"
                },
                "DesiredCapacity": "2",
                "MaxSize": "4",
                "MinSize": "2",
                "Recurrence": "0 9 * * *"
            }
        },
        "EC2WordPressConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": "ami-0970010f37c4f9c8d",
                "InstanceType": "t2.micro",
                "KeyName": "teamtasker-key",
                "SecurityGroups": [{
                    "Ref": "SGEC2"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash\n",
                            "yum update -y && yum upgrade -y && yum install -y httpd && amazon-linux-extras install php7.2 && yum install -y php-mysql\n",
                            "yum install -y amazon-efs-utils\n",
                            "file_system_id=", {
                                "Ref": "EFS"
                            }, "\n",
                            "efs_mount_point=/var/www\n",
                            "mkdir -p \"${efs_mount_point}\"\n",
                            "sudo mount -t efs ${file_system_id}:/ ${efs_mount_point}\n",
                            "\n",
                            "if [ ! -d /var/www/html ]; then\n",
                            "   mkdir -p /var/www/html\n",
                            "   cd /tmp/\n",
                            "   curl -LO https://wordpress.org/latest.tar.gz\n",
                            "   tar xzvf latest.tar.gz\n",
                            "   cp -a /tmp/wordpress/. /var/www/html\n",
                            "   echo success > /var/www/html/health_check.html\n",
                            "   systemctl restart httpd\n",
                            "   DBUSERNAME=admin\n",
                            "   DBPASSWD=password\n",
                            "   DBNAME=wordpress\n",
                            "   DBSITE=", {
                                "Fn::GetAtt": ["TeamTaskerRDS", "Endpoint.Address"]
                            }, "\n",
                            "   curl https://api.wordpress.org/secret-key/1.1/salt/ > /tmp/salt.txt\n",
                            "   sed -i \"/NONCE_SALT/r /tmp/salt.txt\" /var/www/html/wp-config-sample.php\n",
                            "   cat /var/www/html/wp-config-sample.php | sed \"s/username_here/${DBUSERNAME}/;s/password_here/${DBPASSWD}/;s/database_name_here/${DBNAME}/;s/localhost/${DBSITE}/\" > /tmp/wp-config.tmp\n",
                            "   grep -v 'put your unique phrase here' /tmp/wp-config.tmp > /var/www/html/wp-config.php\n",
                            "   chown -R apache:apache /var/www/html\n",
                            "   cd /tmp/\n",
                            "   wget http://us-east-1-aws-training.s3.amazonaws.com/self-paced-lab-4/examplefiles-as.zip\n",
                            "   unzip examplefiles-as.zip\n",
                            "   mkdir /var/www/html/loadtest\n",
                            "   mv examplefiles-as/* /var/www/html/loadtest\n",
                            "fi\n",
                            "systemctl restart httpd\n"
                        ]]
                    }
                }
            }
        },
        "AddToHostedZone": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": "nickleslie.teamtasker.com.",
                "RecordSets": [{
                    "Name": "nickleslie.teamtasker.com.",
                    "Type": "A",
                    "AliasTarget": {
                        "DNSName": {
                            "Fn::GetAtt": ["TeamTaskerELB", "DNSName"]
                        },
                        "HostedZoneId": {
                            "Fn::GetAtt": ["TeamTaskerELB", "CanonicalHostedZoneNameID"]
                        }
                    }
                }]
            }
        },
        "EmailSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [{
                    "Endpoint": "nil0310@arastudent.ac.nz",
                    "Protocol": "email"
                }]
            }
        },
        "EmergencyCPUUsageAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "3",
                "Threshold": "95",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [{
                    "Ref": "EmailSNSTopic"
                }],
                "Dimensions": [{
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "TeamTaskerASG"
                    }
                }]
            }
        },
        "EmergencyUnhealthyInstancesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "MetricName": "UnHealthyHostCount",
                "Namespace": "AWS/ELB",
                "Statistic": "Minimum",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "4",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [{
                    "Ref": "EmailSNSTopic"
                }],
                "Dimensions": [{
                    "Name": "LoadBalancerName",
                    "Value": {
                        "Ref": "TeamTaskerELB"
                    }
                }]
            }
        }
    }
}